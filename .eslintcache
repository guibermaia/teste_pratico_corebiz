[{"C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\index.js":"1","C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\App.js":"2","C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\reportWebVitals.js":"3","C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\componets\\Home\\Home.js":"4","C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\componets\\FormatCurrency.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":171,"mtime":1607723218663,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":5693,"mtime":1607909510177,"results":"10","hashOfConfig":"7"},{"size":340,"mtime":1607899805274,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"121clwf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\index.js",[],["24","25"],"C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\App.js",[],"C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\reportWebVitals.js",[],"C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\componets\\Home\\Home.js",["26"],"C:\\Users\\Guilherme\\Documents\\teste_pratico_corebiz\\src\\componets\\FormatCurrency.js",["27"],"export const SYMBOL_BRL = 'R$';\r\n\r\nexport const format = (value, symbol) => {\r\n    const parsedValue = String(value).replace(/([0-9]{2})$/g, \",$1\")\r\n    if (value.length > 6) {\r\n        console.log(\"batata\")\r\n        parsedValue = String(value).replace(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\r\n    }\r\n    return `${symbol} ${parsedValue}`;\r\n}",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":93,"column":27,"nodeType":"34","messageId":"35","endLine":93,"endColumn":29},{"ruleId":"36","severity":1,"message":"37","line":7,"column":9,"nodeType":"38","messageId":"39","endLine":7,"endColumn":20},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-const-assign","'parsedValue' is constant.","Identifier","const","no-global-assign","no-unsafe-negation"]